;*LIST OFF;	EMulator 8080 - to run Altair Basic;	         Philip Avery July 2012;	ver 1.3  August 2014 (EMNET3);	Changes suggested by George Phillips: ;	mainly - OPTABLE split; msb, lsb;; 8080 code must reside at 8000H, but be assembled for; 0000H - 7FFFH.; Speed: 14.9 times slower than Altair;	ORG	5200HSTART	CALL	01C9H		;CLS	LD	A,0EH	CALL	33H		;Cursor onSTART1 	LD	BC,8000H	;Start of prog, 'PC'	LD	IX,NXTINS	;Use IX as RET addrNXTINS	LD	H,.HIGH.OPTABLE	LD	A,(BC)		;Get opcode from 'PC'	LD	L,A	LD	A,(HL)		;Get MSB of address	INC	H	LD	L,(HL)		;Get LSB of address	LD	H,A	INC	BC		;'PC' to next byte/instr	JP	(HL)		;now Run from start addr	ORG	5300H	;Optable must start at 256 bound.OPTABLE	DB	.HIGH.NOP,.HIGH.LXI_B,.HIGH.STAX_B,.HIGH.INX_B,.HIGH.INR_B,.HIGH.DCR_B,.HIGH.MVI_B	DB	.HIGH.RLC,.HIGH.UNDOC,.HIGH.DAD_B,.HIGH.LDAX_B,.HIGH.DCX_B,.HIGH.INR_C,.HIGH.DCR_C	DB	.HIGH.MVI_C,.HIGH.RRC,.HIGH.UNDOC,.HIGH.LXI_D,.HIGH.STAX_D,.HIGH.INX_D,.HIGH.INR_D	DB	.HIGH.DCR_D,.HIGH.MVI_D,.HIGH.RAL,.HIGH.UNDOC,.HIGH.DAD_D,.HIGH.LDAX_D	DB	.HIGH.DCX_D,.HIGH.INR_E,.HIGH.DCR_E,.HIGH.MVI_E,.HIGH.RAR,.HIGH.UNDOC,.HIGH.LXI_H	DB	.HIGH.SHLD,.HIGH.INX_H,.HIGH.INR_H,.HIGH.DCR_H,.HIGH.MVI_H,.HIGH.DAA,.HIGH.UNDOC	DB	.HIGH.DAD_H,.HIGH.LHLD,.HIGH.DCX_H,.HIGH.INR_L,.HIGH.DCR_L,.HIGH.MVI_L,.HIGH.CMA	DB	.HIGH.UNDOC,.HIGH.LXI_SP,.HIGH.STA,.HIGH.INX_SP,.HIGH.INR_M,.HIGH.DCR_M,.HIGH.MVI_M	DB	.HIGH.STC,.HIGH.UNDOC,.HIGH.DAD_SP,.HIGH.LDA,.HIGH.DCX_SP,.HIGH.INR_A,.HIGH.DCR_A	DB	.HIGH.MVI_A,.HIGH.CMC	DB	.HIGH.MOVB_B,.HIGH.MOVB_C,.HIGH.MOVB_D,.HIGH.MOVB_E,.HIGH.MOVB_H,.HIGH.MOVB_L	DB	.HIGH.MOVB_M,.HIGH.MOVB_A,.HIGH.MOVC_B,.HIGH.MOVC_C,.HIGH.MOVC_D,.HIGH.MOVC_E	DB	.HIGH.MOVC_H,.HIGH.MOVC_L,.HIGH.MOVC_M,.HIGH.MOVC_A,.HIGH.MOVD_B,.HIGH.MOVD_C	DB	.HIGH.MOVD_D,.HIGH.MOVD_E,.HIGH.MOVD_H,.HIGH.MOVD_L,.HIGH.MOVD_M,.HIGH.MOVD_A	DB	.HIGH.MOVE_B,.HIGH.MOVE_C,.HIGH.MOVE_D,.HIGH.MOVE_E,.HIGH.MOVE_H,.HIGH.MOVE_L	DB	.HIGH.MOVE_M,.HIGH.MOVE_A,.HIGH.MOVH_B,.HIGH.MOVH_C,.HIGH.MOVH_D,.HIGH.MOVH_E	DB	.HIGH.MOVH_H,.HIGH.MOVH_L,.HIGH.MOVH_M,.HIGH.MOVH_A,.HIGH.MOVL_B,.HIGH.MOVL_C	DB	.HIGH.MOVL_D,.HIGH.MOVL_E,.HIGH.MOVL_H,.HIGH.MOVL_L,.HIGH.MOVL_M,.HIGH.MOVL_A	DB	.HIGH.MOVM_B,.HIGH.MOVM_C,.HIGH.MOVM_D,.HIGH.MOVM_E,.HIGH.MOVM_H,.HIGH.MOVM_L	DB	.HIGH.HLT,.HIGH.MOVM_A,.HIGH.MOVA_B,.HIGH.MOVA_C,.HIGH.MOVA_D,.HIGH.MOVA_E	DB	.HIGH.MOVA_H,.HIGH.MOVA_L,.HIGH.MOVA_M,.HIGH.MOVA_A	DB	.HIGH.ADD_B,.HIGH.ADD_C,.HIGH.ADD_D,.HIGH.ADD_E,.HIGH.ADD_H,.HIGH.ADD_L,.HIGH.ADD_M	DB	.HIGH.ADD_A,.HIGH.ADC_B,.HIGH.ADC_C,.HIGH.ADC_D,.HIGH.ADC_E,.HIGH.ADC_H,.HIGH.ADC_L	DB	.HIGH.ADC_M,.HIGH.ADC_A,.HIGH.SUB_B,.HIGH.SUB_C,.HIGH.SUB_D,.HIGH.SUB_E,.HIGH.SUB_H	DB	.HIGH.SUB_L,.HIGH.SUB_M,.HIGH.SUB_A,.HIGH.SBB_B,.HIGH.SBB_C,.HIGH.SBB_D,.HIGH.SBB_E	DB	.HIGH.SBB_H,.HIGH.SBB_L,.HIGH.SBB_M,.HIGH.SBB_A,.HIGH.ANA_B,.HIGH.ANA_C,.HIGH.ANA_D	DB	.HIGH.ANA_E,.HIGH.ANA_H,.HIGH.ANA_L,.HIGH.ANA_M,.HIGH.ANA_A,.HIGH.XRA_B,.HIGH.XRA_C	DB	.HIGH.XRA_D,.HIGH.XRA_E,.HIGH.XRA_H,.HIGH.XRA_L,.HIGH.XRA_M,.HIGH.XRA_A,.HIGH.ORA_B	DB	.HIGH.ORA_C,.HIGH.ORA_D,.HIGH.ORA_E,.HIGH.ORA_H,.HIGH.ORA_L,.HIGH.ORA_M,.HIGH.ORA_A	DB	.HIGH.CMP_B,.HIGH.CMP_C,.HIGH.CMP_D,.HIGH.CMP_E,.HIGH.CMP_H,.HIGH.CMP_L,.HIGH.CMP_M	DB	.HIGH.CMP_A,.HIGH.RNZ,.HIGH.POP_B,.HIGH.JNZ,.HIGH.JMP,.HIGH.CNZ,.HIGH.PUSH_B,.HIGH.ADI	DB	.HIGH.RST_0,.HIGH.RZ,.HIGH.RET,.HIGH.JZ,.HIGH.UNDOC,.HIGH.CZ,.HIGH.CALL,.HIGH.ACI,.HIGH.RST_1	DB	.HIGH.RNC,.HIGH.POP_D,.HIGH.JNC,.HIGH.OUT,.HIGH.CNC,.HIGH.PUSH_D,.HIGH.SUI,.HIGH.RST_2	DB	.HIGH.RC1,.HIGH.UNDOC,.HIGH.JC,.HIGH.IN,.HIGH.CC,.HIGH.UNDOC,.HIGH.SBI,.HIGH.RST_3,.HIGH.RPO	DB	.HIGH.POP_H,.HIGH.JPO,.HIGH.XTHL,.HIGH.CPO,.HIGH.PUSH_H,.HIGH.ANI,.HIGH.RST_4	DB	.HIGH.RPE,.HIGH.PCHL,.HIGH.JPE,.HIGH.XCHG,.HIGH.CPE,.HIGH.UNDOC,.HIGH.XRI,.HIGH.RST_5	DB	.HIGH.RP,.HIGH.POP_PSW,.HIGH.JP,.HIGH.DI,.HIGH.CP,.HIGH.PUSH_P,.HIGH.ORI,.HIGH.RST_6	DB	.HIGH.RM,.HIGH.SPHL,.HIGH.JM,.HIGH.EI,.HIGH.CM,.HIGH.UNDOC,.HIGH.CPI,.HIGH.RST_7;Low order byte of OPTABLE       	DB	.LOW.NOP,.LOW.LXI_B,.LOW.STAX_B,.LOW.INX_B,.LOW.INR_B,.LOW.DCR_B,.LOW.MVI_B	DB	.LOW.RLC,.LOW.UNDOC,.LOW.DAD_B,.LOW.LDAX_B,.LOW.DCX_B,.LOW.INR_C,.LOW.DCR_C	DB	.LOW.MVI_C,.LOW.RRC,.LOW.UNDOC,.LOW.LXI_D,.LOW.STAX_D,.LOW.INX_D,.LOW.INR_D	DB	.LOW.DCR_D,.LOW.MVI_D,.LOW.RAL,.LOW.UNDOC,.LOW.DAD_D,.LOW.LDAX_D	DB	.LOW.DCX_D,.LOW.INR_E,.LOW.DCR_E,.LOW.MVI_E,.LOW.RAR,.LOW.UNDOC,.LOW.LXI_H	DB	.LOW.SHLD,.LOW.INX_H,.LOW.INR_H,.LOW.DCR_H,.LOW.MVI_H,.LOW.DAA,.LOW.UNDOC	DB	.LOW.DAD_H,.LOW.LHLD,.LOW.DCX_H,.LOW.INR_L,.LOW.DCR_L,.LOW.MVI_L,.LOW.CMA	DB	.LOW.UNDOC,.LOW.LXI_SP,.LOW.STA,.LOW.INX_SP,.LOW.INR_M,.LOW.DCR_M,.LOW.MVI_M	DB	.LOW.STC,.LOW.UNDOC,.LOW.DAD_SP,.LOW.LDA,.LOW.DCX_SP,.LOW.INR_A,.LOW.DCR_A	DB	.LOW.MVI_A,.LOW.CMC	DB	.LOW.MOVB_B,.LOW.MOVB_C,.LOW.MOVB_D,.LOW.MOVB_E,.LOW.MOVB_H,.LOW.MOVB_L	DB	.LOW.MOVB_M,.LOW.MOVB_A,.LOW.MOVC_B,.LOW.MOVC_C,.LOW.MOVC_D,.LOW.MOVC_E	DB	.LOW.MOVC_H,.LOW.MOVC_L,.LOW.MOVC_M,.LOW.MOVC_A,.LOW.MOVD_B,.LOW.MOVD_C	DB	.LOW.MOVD_D,.LOW.MOVD_E,.LOW.MOVD_H,.LOW.MOVD_L,.LOW.MOVD_M,.LOW.MOVD_A	DB	.LOW.MOVE_B,.LOW.MOVE_C,.LOW.MOVE_D,.LOW.MOVE_E,.LOW.MOVE_H,.LOW.MOVE_L	DB	.LOW.MOVE_M,.LOW.MOVE_A,.LOW.MOVH_B,.LOW.MOVH_C,.LOW.MOVH_D,.LOW.MOVH_E	DB	.LOW.MOVH_H,.LOW.MOVH_L,.LOW.MOVH_M,.LOW.MOVH_A,.LOW.MOVL_B,.LOW.MOVL_C	DB	.LOW.MOVL_D,.LOW.MOVL_E,.LOW.MOVL_H,.LOW.MOVL_L,.LOW.MOVL_M,.LOW.MOVL_A	DB	.LOW.MOVM_B,.LOW.MOVM_C,.LOW.MOVM_D,.LOW.MOVM_E,.LOW.MOVM_H,.LOW.MOVM_L	DB	.LOW.HLT,.LOW.MOVM_A,.LOW.MOVA_B,.LOW.MOVA_C,.LOW.MOVA_D,.LOW.MOVA_E	DB	.LOW.MOVA_H,.LOW.MOVA_L,.LOW.MOVA_M,.LOW.MOVA_A	DB	.LOW.ADD_B,.LOW.ADD_C,.LOW.ADD_D,.LOW.ADD_E,.LOW.ADD_H,.LOW.ADD_L,.LOW.ADD_M	DB	.LOW.ADD_A,.LOW.ADC_B,.LOW.ADC_C,.LOW.ADC_D,.LOW.ADC_E,.LOW.ADC_H,.LOW.ADC_L	DB	.LOW.ADC_M,.LOW.ADC_A,.LOW.SUB_B,.LOW.SUB_C,.LOW.SUB_D,.LOW.SUB_E,.LOW.SUB_H	DB	.LOW.SUB_L,.LOW.SUB_M,.LOW.SUB_A,.LOW.SBB_B,.LOW.SBB_C,.LOW.SBB_D,.LOW.SBB_E	DB	.LOW.SBB_H,.LOW.SBB_L,.LOW.SBB_M,.LOW.SBB_A,.LOW.ANA_B,.LOW.ANA_C,.LOW.ANA_D	DB	.LOW.ANA_E,.LOW.ANA_H,.LOW.ANA_L,.LOW.ANA_M,.LOW.ANA_A,.LOW.XRA_B,.LOW.XRA_C	DB	.LOW.XRA_D,.LOW.XRA_E,.LOW.XRA_H,.LOW.XRA_L,.LOW.XRA_M,.LOW.XRA_A,.LOW.ORA_B	DB	.LOW.ORA_C,.LOW.ORA_D,.LOW.ORA_E,.LOW.ORA_H,.LOW.ORA_L,.LOW.ORA_M,.LOW.ORA_A	DB	.LOW.CMP_B,.LOW.CMP_C,.LOW.CMP_D,.LOW.CMP_E,.LOW.CMP_H,.LOW.CMP_L,.LOW.CMP_M	DB	.LOW.CMP_A,.LOW.RNZ,.LOW.POP_B,.LOW.JNZ,.LOW.JMP,.LOW.CNZ,.LOW.PUSH_B,.LOW.ADI	DB	.LOW.RST_0,.LOW.RZ,.LOW.RET,.LOW.JZ,.LOW.UNDOC,.LOW.CZ,.LOW.CALL,.LOW.ACI,.LOW.RST_1	DB	.LOW.RNC,.LOW.POP_D,.LOW.JNC,.LOW.OUT,.LOW.CNC,.LOW.PUSH_D,.LOW.SUI,.LOW.RST_2	DB	.LOW.RC1,.LOW.UNDOC,.LOW.JC,.LOW.IN,.LOW.CC,.LOW.UNDOC,.LOW.SBI,.LOW.RST_3,.LOW.RPO	DB	.LOW.POP_H,.LOW.JPO,.LOW.XTHL,.LOW.CPO,.LOW.PUSH_H,.LOW.ANI,.LOW.RST_4	DB	.LOW.RPE,.LOW.PCHL,.LOW.JPE,.LOW.XCHG,.LOW.CPE,.LOW.UNDOC,.LOW.XRI,.LOW.RST_5	DB	.LOW.RP,.LOW.POP_PSW,.LOW.JP,.LOW.DI,.LOW.CP,.LOW.PUSH_P,.LOW.ORI,.LOW.RST_6	DB	.LOW.RM,.LOW.SPHL,.LOW.JM,.LOW.EI,.LOW.CM,.LOW.UNDOC,.LOW.CPI,.LOW.RST_7;RegistersRC	DB	0RB	DB	0RE	DB	0RD	DB	0RL	DB	0RH	DB	0RSP	DW	07FFFHCOUNT	DW	0064H	; Count for 8080test repeatsKEY	DB	0	; Key bufferSAVLOD	DB	0	; Set FF Save, 00 nothing 01 LoadSLADD	DW	0C000H	; Save/Load start addressSLFIN	DW	1111H	; Save/Load finish address;NOP	JP	(IX)LXI_B	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	INC	BC	LD	(RC),HL	JP	(IX)STAX_B	EX	AF,AF'	LD	HL,(RC)	SET	7,H	LD	(HL),A	EX	AF,AF'	JP	(IX)INX_B	LD	HL,(RC)	INC	HL	LD	(RC),HL	JP	(IX)INR_B	EX	AF,AF'	LD	HL,RB	INC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)DCR_B	EX	AF,AF'	LD	HL,RB	DEC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)MVI_B	LD	A,(BC)	LD	(RB),A	INC	BC	JP	(IX)RLC	EX	AF,AF'	RLCA	EX	AF,AF'	JP	(IX)DAD_B	EX	AF,AF'	LD	DE,(RC)	LD	HL,(RL)	ADD	HL,DE	LD	(RL),HL	EX	AF,AF'	JP	(IX)LDAX_B	EX	AF,AF'	LD	HL,(RC)	SET	7,H	LD	A,(HL)	EX	AF,AF'	JP	(IX)DCX_B	LD	HL,(RC)	DEC	HL	LD	(RC),HL	JP	(IX)INR_C	EX	AF,AF'	LD	HL,RC	INC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)DCR_C	EX	AF,AF'	LD	HL,RC	DEC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)MVI_C	LD	A,(BC)	LD	(RC),A	INC	BC	JP	(IX)RRC	EX	AF,AF'	RRCA	EX	AF,AF'	JP	(IX)LXI_D	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	INC	BC	LD	(RE),HL	JP	(IX)STAX_D	EX	AF,AF'	LD	HL,(RE)	SET	7,H	LD	(HL),A	EX	AF,AF'	JP	(IX)INX_D	LD	HL,(RE)	INC	HL	LD	(RE),HL	JP	(IX)INR_D	EX	AF,AF'	LD	HL,RD	INC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)DCR_D	EX	AF,AF'	LD	HL,RD	DEC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)MVI_D	LD	A,(BC)	LD	(RD),A	INC	BC	JP	(IX)RAL	EX	AF,AF'	RLA	EX	AF,AF'	JP	(IX)DAD_D	EX	AF,AF'	LD	DE,(RE)	LD	HL,(RL)	ADD	HL,DE	LD	(RL),HL	EX	AF,AF'	JP	(IX)LDAX_D	EX	AF,AF'	LD	HL,(RE)	SET	7,H	LD	A,(HL)	EX	AF,AF'	JP	(IX)DCX_D	LD	HL,(RE)	DEC	HL	LD	(RE),HL	JP	(IX)INR_E	EX	AF,AF'	LD	HL,RE	INC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)DCR_E	EX	AF,AF'	LD	HL,RE	DEC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)MVI_E	LD	A,(BC)	LD	(RE),A	INC	BC	JP	(IX)RAR	EX	AF,AF'	RRA	EX	AF,AF'	JP	(IX)LXI_H	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	INC	BC	LD	(RL),HL	JP	(IX)SHLD	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	INC	BC	LD	DE,(RL)	SET	7,H	LD	(HL),E	INC	HL	LD	(HL),D	JP	(IX)INX_H	LD	HL,(RL)	INC	HL	LD	(RL),HL	JP	(IX)INR_H	EX	AF,AF'	LD	HL,RH	INC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)DCR_H	EX	AF,AF'	LD	HL,RH	DEC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)MVI_H	LD	A,(BC)	LD	(RH),A	INC	BC	JP	(IX)DAA	EX	AF,AF'	DAA	EX	AF,AF'	JP	(IX)DAD_H	EX	AF,AF'	LD	HL,(RL)	ADD	HL,HL	LD	(RL),HL	EX	AF,AF'	JP	(IX)LHLD	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	INC	BC	SET	7,H	LD	E,(HL)	INC	HL	LD	D,(HL)	LD	(RL),DE	JP	(IX)DCX_H	LD	HL,(RL)	DEC	HL	LD	(RL),HL	JP	(IX)INR_L	EX	AF,AF'	LD	HL,RL	INC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)DCR_L	EX	AF,AF'	LD	HL,RL	DEC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)MVI_L	LD	A,(BC)	LD	(RL),A	INC	BC	JP	(IX)CMA	EX	AF,AF'	CPL	EX	AF,AF'	JP	(IX)LXI_SP	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	INC	BC	LD	(RSP),HL	JP	(IX)STA	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	SET	7,H	INC	BC	EX	AF,AF'	LD	(HL),A	EX	AF,AF'	JP	(IX)INX_SP	LD	HL,(RSP)	INC	HL	LD	(RSP),HL	JP	(IX)INR_M	LD	HL,(RL)	SET	7,H	EX	AF,AF'	INC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)DCR_M	LD	HL,(RL)	SET	7,H	EX	AF,AF'	DEC	(HL)	CALL	PARINR	EX	AF,AF'	JP	(IX)MVI_M	LD	A,(BC)	INC	BC	LD	HL,(RL)	SET	7,H	LD	(HL),A	JP	(IX)STC	EX	AF,AF'	SCF	EX	AF,AF'	JP	(IX)DAD_SP	EX	AF,AF'	LD	DE,(RSP)	LD	HL,(RL)	ADD	HL,DE	LD	(RL),HL	EX	AF,AF'	JP	(IX)LDA	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	INC	BC	SET	7,H	EX	AF,AF'	LD	A,(HL)	EX	AF,AF'	JP	(IX)DCX_SP	LD	HL,(RSP)	DEC	HL	LD	(RSP),HL	JP	(IX)INR_A	EX	AF,AF'	INC	A	CALL	PARITY	EX	AF,AF'	JP	(IX)DCR_A	EX	AF,AF'	DEC	A	CALL	PARITY	EX	AF,AF'	JP	(IX)MVI_A	EX	AF,AF'	LD	A,(BC)	EX	AF,AF'	INC	BC	JP	(IX)CMC	EX	AF,AF'	CCF	EX	AF,AF'	JP	(IX)MOVB_B	LD	A,(RB)	LD	(RB),A	JP	(IX)MOVB_C	LD	A,(RC)	LD	(RB),A	JP	(IX)MOVB_D	LD	A,(RD)	LD	(RB),A	JP	(IX)MOVB_E	LD	A,(RE)	LD	(RB),A	JP	(IX)MOVB_H	LD	A,(RH)	LD	(RB),A	JP	(IX)MOVB_L	LD	A,(RL)	LD	(RB),A	JP	(IX)MOVB_M	LD	HL,(RL)	SET	7,H	LD	A,(HL)	LD	(RB),A	JP	(IX)MOVB_A	EX	AF,AF'	LD	(RB),A	EX	AF,AF'	JP	(IX)MOVC_B	LD	A,(RB)	LD	(RC),A	JP	(IX)MOVC_C	LD	A,(RC)	LD	(RC),A	JP	(IX)MOVC_D	LD	A,(RD)	LD	(RC),A	JP	(IX)MOVC_E	LD	A,(RE)	LD	(RC),A	JP	(IX)MOVC_H	LD	A,(RH)	LD	(RC),A	JP	(IX)MOVC_L	LD	A,(RL)	LD	(RC),A	JP	(IX)MOVC_M	LD	HL,(RL)	SET	7,H	LD	A,(HL)	LD	(RC),A	JP	(IX)MOVC_A	EX	AF,AF'	LD	(RC),A	EX	AF,AF'	JP	(IX)MOVD_B	LD	A,(RB)	LD	(RD),A	JP	(IX)MOVD_C	LD	A,(RC)	LD	(RD),A	JP	(IX)MOVD_D	LD	A,(RD)	LD	(RD),A	JP	(IX)MOVD_E	LD	A,(RE)	LD	(RD),A	JP	(IX)MOVD_H	LD	A,(RH)	LD	(RD),A	JP	(IX)MOVD_L	LD	A,(RL)	LD	(RD),A	JP	(IX)MOVD_M	LD	HL,(RL)	SET	7,H	LD	A,(HL)	LD	(RD),A	JP	(IX)MOVD_A	EX	AF,AF'	LD	(RD),A	EX	AF,AF'	JP	(IX)MOVE_B	LD	A,(RB)	LD	(RE),A	JP	(IX)MOVE_C	LD	A,(RC)	LD	(RE),A	JP	(IX)MOVE_D	LD	A,(RD)	LD	(RE),A	JP	(IX)MOVE_E	LD	A,(RE)	LD	(RE),A	JP	(IX)MOVE_H	LD	A,(RH)	LD	(RE),A	JP	(IX)MOVE_L	LD	A,(RL)	LD	(RE),A	JP	(IX)MOVE_M	LD	HL,(RL)	SET	7,H	LD	A,(HL)	LD	(RE),A	JP	(IX)MOVE_A	EX	AF,AF'	LD	(RE),A	EX	AF,AF'	JP	(IX)MOVH_B	LD	A,(RB)	LD	(RH),A	JP	(IX)MOVH_C	LD	A,(RC)	LD	(RH),A	JP	(IX)MOVH_D	LD	A,(RD)	LD	(RH),A	JP	(IX)MOVH_E	LD	A,(RE)	LD	(RH),A	JP	(IX)MOVH_H	LD	A,(RH)	LD	(RH),A	JP	(IX)MOVH_L	LD	A,(RL)	LD	(RH),A	JP	(IX)MOVH_M	LD	HL,(RL)	SET	7,H	LD	A,(HL)	LD	(RH),A	JP	(IX)MOVH_A	EX	AF,AF'	LD	(RH),A	EX	AF,AF'	JP	(IX)MOVL_B	LD	A,(RB)	LD	(RL),A	JP	(IX)MOVL_C	LD	A,(RC)	LD	(RL),A	JP	(IX)MOVL_D	LD	A,(RD)	LD	(RL),A	JP	(IX)MOVL_E	LD	A,(RE)	LD	(RL),A	JP	(IX)MOVL_H	LD	A,(RH)	LD	(RL),A	JP	(IX)MOVL_L	LD	A,(RL)	LD	(RL),A	JP	(IX)MOVL_M	LD	HL,(RL)	SET	7,H	LD	A,(HL)	LD	(RL),A	JP	(IX)MOVL_A	EX	AF,AF'	LD	(RL),A	EX	AF,AF'	JP	(IX)MOVM_B	LD	A,(RB)	LD	HL,(RL)	SET	7,H	LD	(HL),A	JP	(IX)MOVM_C	LD	A,(RC)	LD	HL,(RL)	SET	7,H	LD	(HL),A	JP	(IX)MOVM_D	LD	A,(RD)	LD	HL,(RL)	SET	7,H	LD	(HL),A	JP	(IX)MOVM_E	LD	A,(RE)	LD	HL,(RL)	SET	7,H	LD	(HL),A	JP	(IX)MOVM_H	LD	A,(RH)	LD	HL,(RL)	SET	7,H	LD	(HL),A	JP	(IX)MOVM_L	LD	A,(RL)	LD	HL,(RL)	SET	7,H	LD	(HL),A	JP	(IX)MOVM_A	LD	HL,(RL)	SET	7,H	EX	AF,AF'	LD	(HL),A	EX	AF,AF'	JP	(IX)MOVA_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	LD	A,H	EX	AF,AF'	JP	(IX)MOVA_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	LD	A,H	EX	AF,AF'	JP	(IX)MOVA_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	LD	A,H	EX	AF,AF'	JP	(IX)MOVA_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	LD	A,H	EX	AF,AF'	JP	(IX)MOVA_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	LD	A,H	EX	AF,AF'	JP	(IX)MOVA_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	LD	A,H	EX	AF,AF'	JP	(IX)MOVA_M	LD	HL,(RL)	SET	7,H	EX	AF,AF'	LD	A,(HL)	EX	AF,AF'	JP	(IX)MOVA_A	EX	AF,AF'	LD	A,A	EX	AF,AF'	JP	(IX)ADD_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	ADD	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADD_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	ADD	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADD_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	ADD	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADD_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	ADD	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADD_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	ADD	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADD_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	ADD	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADD_M	LD	HL,(RL)	SET	7,H	LD	H,(HL)	EX	AF,AF'	ADD	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADD_A	EX	AF,AF'	ADD	A,A	CALL	PARITY	EX	AF,AF'	JP	(IX)ADC_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	ADC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADC_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	ADC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADC_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	ADC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADC_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	ADC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADC_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	ADC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADC_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	ADC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADC_M	LD	HL,(RL)	SET	7,H	LD	H,(HL)	EX	AF,AF'	ADC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)ADC_A	EX	AF,AF'	ADC	A,A	CALL	PARITY	EX	AF,AF'	JP	(IX)SUB_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	SUB	H	CALL	PARITY	EX	AF,AF'	JP	(IX)SUB_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	SUB	H	CALL	PARITY	EX	AF,AF'	JP	(IX)SUB_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	SUB	H	CALL	PARITY	EX	AF,AF'	JP	(IX)SUB_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	SUB	H	CALL	PARITY	EX	AF,AF'	JP	(IX)SUB_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	SUB	H	CALL	PARITY	EX	AF,AF'	JP	(IX)SUB_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	SUB	H	CALL	PARITY	EX	AF,AF'	JP	(IX)SUB_M	LD	HL,(RL)	SET	7,H	LD	H,(HL)	EX	AF,AF'	SUB	H	CALL	PARITY	EX	AF,AF'	JP	(IX)SUB_A	EX	AF,AF'	SUB	A	CALL	PARITY	EX	AF,AF'	JP	(IX)SBB_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	SBC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)SBB_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	SBC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)SBB_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	SBC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)SBB_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	SBC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)SBB_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	SBC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)SBB_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	SBC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)SBB_M	LD	HL,(RL)	SET	7,H	LD	H,(HL)	EX	AF,AF'	SBC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)SBB_A	EX	AF,AF'	SBC	A,A	CALL	PARITY	EX	AF,AF'	JP	(IX)ANA_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	AND	H	EX	AF,AF'	JP	(IX)ANA_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	AND	H	EX	AF,AF'	JP	(IX)ANA_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	AND	H	EX	AF,AF'	JP	(IX)ANA_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	AND	H	EX	AF,AF'	JP	(IX)ANA_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	AND	H	EX	AF,AF'	JP	(IX)ANA_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	AND	H	EX	AF,AF'	JP	(IX)ANA_M	LD	HL,(RL)	SET	7,H	LD	H,(HL)	EX	AF,AF'	AND	H	EX	AF,AF'	JP	(IX)ANA_A	EX	AF,AF'	AND	A	EX	AF,AF'	JP	(IX)XRA_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	XOR	H	EX	AF,AF'	JP	(IX)XRA_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	XOR	H	EX	AF,AF'	JP	(IX)XRA_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	XOR	H	EX	AF,AF'	JP	(IX)XRA_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	XOR	H	EX	AF,AF'	JP	(IX)XRA_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	XOR	H	EX	AF,AF'	JP	(IX)XRA_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	XOR	H	EX	AF,AF'	JP	(IX)XRA_M	LD	HL,(RL)	SET	7,H	LD	H,(HL)	EX	AF,AF'	XOR	H	EX	AF,AF'	JP	(IX)XRA_A	EX	AF,AF'	XOR	A	EX	AF,AF'	JP	(IX)ORA_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	OR	H	EX	AF,AF'	JP	(IX)ORA_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	OR 	H	EX	AF,AF'	JP	(IX)ORA_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	OR 	H	EX	AF,AF'	JP	(IX)ORA_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	OR 	H	EX	AF,AF'	JP	(IX)ORA_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	OR 	H	EX	AF,AF'	JP	(IX)ORA_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	OR 	H	EX	AF,AF'	JP	(IX)ORA_M	LD	HL,(RL)	SET	7,H	LD	H,(HL)	EX	AF,AF'	OR 	H	EX	AF,AF'	JP	(IX)ORA_A	EX	AF,AF'	OR 	A	EX	AF,AF'	JP	(IX)CMP_B	LD	A,(RB)	LD	H,A	EX	AF,AF'	CP 	H	CALL	PARITY	EX	AF,AF'	JP	(IX)CMP_C	LD	A,(RC)	LD	H,A	EX	AF,AF'	CP 	H	CALL	PARITY	EX	AF,AF'	JP	(IX)CMP_D	LD	A,(RD)	LD	H,A	EX	AF,AF'	CP 	H	CALL	PARITY	EX	AF,AF'	JP	(IX)CMP_E	LD	A,(RE)	LD	H,A	EX	AF,AF'	CP 	H	CALL	PARITY	EX	AF,AF'	JP	(IX)CMP_H	LD	A,(RH)	LD	H,A	EX	AF,AF'	CP 	H	CALL	PARITY	EX	AF,AF'	JP	(IX)CMP_L	LD	A,(RL)	LD	H,A	EX	AF,AF'	CP 	H	CALL	PARITY	EX	AF,AF'	JP	(IX)CMP_M	LD	HL,(RL)	SET	7,H	LD	H,(HL)	EX	AF,AF'	CP 	H	CALL	PARITY	EX	AF,AF'	JP	(IX)CMP_A	EX	AF,AF'	CP 	A	CALL	PARITY	EX	AF,AF'	JP	(IX)RZ	EX	AF,AF'	JP	Z,RZ1	EX	AF,AF'	JP	(IX)RNZ	EX	AF,AF'	JP	NZ,RZ1	EX	AF,AF'	JP	(IX)RNC	EX	AF,AF'	JP	NC,RZ1	EX	AF,AF'	JP	(IX)RC1	EX	AF,AF'	JP	C,RZ1	EX	AF,AF'	JP	(IX)RPO	EX	AF,AF'	JP	PO,RZ1	EX	AF,AF'	JP	(IX)RPE	EX	AF,AF'	JP	PE,RZ1	EX	AF,AF'	JP	(IX)RP	EX	AF,AF'	JP	P,RZ1	EX	AF,AF'	JP	(IX)RM	EX	AF,AF'	JP	M,RZ1	EX	AF,AF'	JP	(IX)RZ1	EX	AF,AF'		;Not zero, so do RETURNRET	LD	HL,(RSP)	SET	7,H	LD	E,(HL)		;Get contents of em_ SP	INC	HL		;from emulated stack	LD	D,(HL)		;DE now has RET addr	INC	HL	RES	7,H	LD	(RSP),HL	SET	7,D	LD	B,D	LD	C,E	JP	(IX)POP_B	LD	HL,(RSP)	SET	7,H	LD	E,(HL)		;Get contents of em_ SP	INC	HL		;from emulated stack	LD	D,(HL)		;DE has contents for BC	INC	HL	RES	7,H	LD	(RSP),HL	LD	(RC),DE	JP	(IX)JZ	EX	AF,AF'	JP	Z,JNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)JNZ	EX	AF,AF'	JP	NZ,JNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)JNC	EX	AF,AF'	JP	NC,JNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)JC	EX	AF,AF'	JP	C,JNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)JPO	EX	AF,AF'	JP	PO,JNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)JPE	EX	AF,AF'	JP	PE,JNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)JP	EX	AF,AF'	JP	P,JNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)JM	EX	AF,AF'	JP	M,JNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)JNZ1	EX	AF,AF'JMP	LD	A,(BC)	LD	L,A	INC	BC	LD	A,(BC)	LD	H,A	SET	7,H	LD	B,H	LD	C,L	JP	(IX)CZ	EX	AF,AF'	JP	Z,CNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)CNZ	EX	AF,AF'	JP	NZ,CNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)CNC	EX	AF,AF'	JP	NC,CNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)CC	EX	AF,AF'	JP	C,CNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)CPO	EX	AF,AF'	JP	PO,CNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)CPE	EX	AF,AF'	JP	PE,CNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)CP	EX	AF,AF'	JP	P,CNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)CM	EX	AF,AF'	JP	M,CNZ1	EX	AF,AF'	INC	BC	INC	BC	JP	(IX)CNZ1	EX	AF,AF'CALL	LD	A,(BC)	LD	E,A		;DE gets Call address	INC	BC	LD	A,(BC)	LD	D,A	SET	7,D	INC	BC	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B		;Push CALL's ret addr	DEC	HL		;onto emulated stack	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	B,D	LD	C,E	JP	(IX)PUSH_B	LD	HL,(RSP)	SET	7,H	DEC	HL	LD	DE,(RC)	LD	(HL),D	DEC	HL	LD	(HL),E	RES	7,H	LD	(RSP),HL	JP	(IX)ADI	LD	A,(BC)	INC	BC	LD	H,A	EX	AF,AF'	ADD	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)RST_0	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B	DEC	HL	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	BC,8000H	JP	(IX)ACI	LD	A,(BC)	INC	BC	LD	H,A	EX	AF,AF'	ADC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)RST_1	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B	DEC	HL	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	BC,8008H	JP	(IX)POP_D	LD	HL,(RSP)	SET	7,H	LD	E,(HL)	INC	HL	LD	D,(HL)	INC	HL	RES	7,H	LD	(RSP),HL	LD	(RE),DE	JP	(IX)OUT	LD	A,(BC)	INC	BC	OR	A	JP	NZ,OUT00	JP	(IX)OUT00	CP	1	JP	Z,OUT01LOOP4	JP	LOOP4OUT01	LD	A,(SAVLOD)	OR	A	JP	P,OUT04	LD	HL,(SLADD)	; FFH=Save	EX	AF,AF'	PUSH	AF	EX	AF,AF'	POP	AF	AND	7FH	LD	(HL),A	INC	HL	LD	(SLADD),HLOUT04	EX	AF,AF'	AND	7FH	PUSH	AF	JP	Z,OUT02	CP	0DH	JP	Z,OUT02	CP	5FH	;Correction for DEL (08)	JP	NZ,OUT03	LD	A,8OUT03	PUSH	BC	CALL	33H		;Display char	POP	BCOUT02	POP	AF	EX	AF,AF'	JP	(IX)PUSH_D	LD	HL,(RSP)	SET	7,H	DEC	HL	LD	DE,(RE)	LD	(HL),D	DEC	HL	LD	(HL),E	RES	7,H	LD	(RSP),HL	JP	(IX)SUI	LD	A,(BC)	INC	BC	LD	H,A	EX	AF,AF'	SUB	H	CALL	PARITY	EX	AF,AF'	JP	(IX)RST_2	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B	DEC	HL	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	BC,8010H	JP	(IX)IN	LD	A,(BC)	INC	BC	OR	A	JP	Z,IOSTAT	CP	1	JP	Z,IOPORTIOSTAT	LD	A,(SAVLOD)	DEC	A	JP	Z,IOST4	LD	A,(KEY)	OR	A	JP	NZ,IOST4	CALL	2BH		;Scan keys	DEC	A	JP	M,IOST5    ; A was 0 - no key pressed	JP	NZ,IOST2	; Key pressed	INC	A	;BREAK, make a=3	INC	AIOST2	INC	AIOST3	LD	(KEY),AIOST4 	EX	AF,AF'	XOR	A	; Bit 7=0, bit 0=0 (ready for	EX	AF,AF'	; output, has input char)	JP	(IX)IOST5	EX	AF,AF'	LD	A,1	;Bit 7=0, bit 0=1 (ready for	EX	AF,AF'	; output, no input char)	JP	(IX)IOPORT	LD	A,(SAVLOD)	DEC	A	JP	NZ,IOP2	; Save or nothing	LD	HL,(SLADD)	; Loading	LD	DE,(SLFIN)	RST	18H	; HL > DE?	JP	NC,IOP1	; Yes, past last char	LD	A,(HL)	LD	(KEY),A	INC	HL	LD	(SLADD),HL	JP	IOP2IOP1	XOR	A	LD	(SAVLOD),A	LD	BC,81F9H	; Print OK	JP	(IX)IOP2	EX	AF,AF'	LD	A,(KEY)	CP	8	;DEL?	JP	NZ,IOP3	LD	A,5FH	;Change from 08 to 5fHIOP3	EX	AF,AF'	XOR	A	LD	(KEY),A	JP	(IX)SBI	LD	A,(BC)	INC	BC	LD	H,A	EX	AF,AF'	SBC	A,H	CALL	PARITY	EX	AF,AF'	JP	(IX)RST_3	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B	DEC	HL	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	BC,8018H	JP	(IX)POP_H	LD	HL,(RSP)	SET	7,H	LD	E,(HL)		;Get contents of em_ SP	INC	HL		;from emulated stack	LD	D,(HL)		;DE has contents for BC	INC	HL	RES	7,H	LD	(RSP),HL	LD	(RL),DE	JP	(IX)XTHL	LD	HL,(RSP)	SET	7,H	LD	IY,0	DI	ADD	IY,SP	LD	SP,HL	LD	HL,(RL)	EX	(SP),HL	LD	(RL),HL	LD	SP,IY	EI	JP	(IX)PUSH_H	LD	HL,(RSP)	SET	7,H	DEC	HL	LD	DE,(RL)	LD	(HL),D	DEC	HL	LD	(HL),E	RES	7,H	LD	(RSP),HL	JP	(IX)ANI	LD	A,(BC)	INC	BC	LD	H,A	EX	AF,AF'	AND	H	EX	AF,AF'	JP	(IX)RST_4	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B	DEC	HL	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	BC,8020H	JP	(IX)PCHL	LD	BC,(RL)	SET	7,B	JP	(IX)XCHG	LD	DE,(RE)	LD	HL,(RL)	LD	(RE),HL	LD	(RL),DE	JP	(IX)XRI	LD	A,(BC)	INC	BC	LD	H,A	EX	AF,AF'	XOR	H	EX	AF,AF'	JP	(IX)RST_5	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B	DEC	HL	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	BC,8028H	JP	(IX)POP_PSW	LD	HL,(RSP)	SET	7,H	LD	IY,0	DI	ADD	IY,SP	LD	SP,HL	EX	AF,AF'	POP	AF	EX	AF,AF'	INC	HL	INC	HL	RES	7,H	LD	(RSP),HL	LD	SP,IY	EI	JP	(IX)DI	JP	(IX)PUSH_P	LD	HL,(RSP)	SET	7,H	LD	IY,0	DI	ADD	IY,SP	LD	SP,HL	EX	AF,AF'	PUSH	AF	EX	AF,AF'	DEC	HL	DEC	HL	RES	7,H	LD	(RSP),HL	LD	SP,IY	EI	JP	(IX)ORI	LD	A,(BC)	INC	BC	LD	H,A	EX	AF,AF'	OR	H	EX	AF,AF'	JP	(IX)RST_6	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B	DEC	HL	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	BC,8030H	JP	(IX)SPHL	LD	HL,(RSP)	LD	DE,(RL)	LD	(RSP),DE	JP	(IX)EI	JP	(IX)CPI	LD	A,(BC)	INC	BC	LD	H,A	EX	AF,AF'	CP	H	CALL	PARITY	EX	AF,AF'	JP	(IX)RST_7	LD	HL,(RSP)	SET	7,H	DEC	HL	RES	7,B	LD	(HL),B	DEC	HL	LD	(HL),C	RES	7,H	LD	(RSP),HL	LD	BC,8038H	JP	(IX)HLT1	JP	HLTUNDOC	DEC	BC	PUSH	BC 	LD	HL,UNDOCM	;Print 'UNDOC_._'UNDOC0	LD	A,(HL)	OR	A	JP	Z,UNDOC4	PUSH	HL	CALL	33H		;Print char	POP	HL	INC	HL	JP	UNDOC0UNDOC4	POP	BC		;Hex-Ascii of 'PC'	LD	A,B	CALL	UNDOC1	LD	A,C	CALL	UNDOC1	LD	A,'H'	CALL	33H		;Print char	JP	402DH		;Exit to DOSUNDOC1	PUSH	AF		;Get most signif 4 bits	SRL	A	SRL	A	SRL	A	SRL	A	CALL 	UNDOC2		;Print in Ascii	POP	AF		;Get least signif 4 bits	AND	0FH	CALL	UNDOC2		;Print in Ascii	RETUNDOC2	ADD	A,30H	CP	3AH	JP	M,UNDOC3	ADD	A,7UNDOC3	PUSH	BC		;Send 0-F to screen	CALL	33H		;Print char	POP	BC	RETUNDOCM	DM	'UNDOC code at ',0;			HLT for 8080test (TEST81/CMD);			Make active: change HLT1 to HLTHLT	LD	A,(BC)	; Exit for 8080test	CP	1	; Next byte: 1 = Error detected	JP	Z,CPUER	CP	2	; 2 = CPU ok	JP	Z,CPUOKLOOP2	JP	LOOP2CPUOK	LD	HL,(COUNT)	XOR	A	CP	H	JP	NZ,OK1	CP	L	JP	Z,402DHOK1	DEC	HL	LD	(COUNT),HL	LD	HL,0101H	LD	(84F5H),HL	LD	(84F7H),HL	LD	H,02	LD	(84F9H),HL	LD	HL,0F385H	LD	(84FBH),HL	JP	START1CPUER	LD	HL,(RSP)	SET	7,H	LD	E,(HL)	INC	HL	LD	D,(HL)	DEC	DELOOP3	JP	LOOP3			; Z80/8080 Parity differencePARITY	PUSH	AF	; Some Z80 instr use parity flag	EX	AF,AF'	; as overflow, 8080 is all parity	POP	HL	; Get copy of AF	LD	A,H	OR	A	JP	PO,PODD	SET	2,L	; Parity Even, set flag	JP	EXPARPODD	RES	2,L	; Parity Odd, turn flag offEXPAR	PUSH	HL	; Get modified flag back to AF	EX	AF,AF'	POP	AF	RET			; PARINR Parity INR & DCR			; Gets A from (HL)PARINR	PUSH	AF	; Save A'	PUSH	AF	; Save flags'	PUSH	HL	; Save HL'	EX	AF,AF'	POP	HL	LD	A,(HL)	; Got (HL)'	POP	HL	; Get flags'	OR	A	JP	PO,PARI1	SET	2,L	JP	PARIEXPARI1 	RES	2,LPARIEX	POP	DE	; Get A'	LD	H,D	PUSH	HL	; Save with new flags	EX	AF,AF'	POP	AF	RET	END	START